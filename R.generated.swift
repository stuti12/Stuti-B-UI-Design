//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Onboarding`.
    static let onboarding = _R.storyboard.onboarding()
    /// Storyboard `Signup`.
    static let signup = _R.storyboard.signup()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Onboarding", bundle: ...)`
    static func onboarding(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.onboarding)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Signup", bundle: ...)`
    static func signup(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signup)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `FB`.
    static let fB = Rswift.ColorResource(bundle: R.hostingBundle, name: "FB")
    /// Color `Google`.
    static let google = Rswift.ColorResource(bundle: R.hostingBundle, name: "Google")
    /// Color `Grey`.
    static let grey = Rswift.ColorResource(bundle: R.hostingBundle, name: "Grey")
    /// Color `System-theme`.
    static let systemTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "System-theme")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "FB", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func fB(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.fB, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Google", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Grey", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "System-theme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func systemTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.systemTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "FB", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func fB(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.fB.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Google", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func google(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.google.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Grey", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grey(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grey.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "System-theme", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func systemTheme(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.systemTheme.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 15 files.
  struct file {
    /// Resource file `SFPRODISPLAYBLACKITALIC.OTF`.
    static let sfprodisplayblackitalicotF = Rswift.FileResource(bundle: R.hostingBundle, name: "SFPRODISPLAYBLACKITALIC", pathExtension: "OTF")
    /// Resource file `SFPRODISPLAYBOLD.OTF`.
    static let sfprodisplayboldotF = Rswift.FileResource(bundle: R.hostingBundle, name: "SFPRODISPLAYBOLD", pathExtension: "OTF")
    /// Resource file `SFPRODISPLAYHEAVYITALIC.OTF`.
    static let sfprodisplayheavyitalicotF = Rswift.FileResource(bundle: R.hostingBundle, name: "SFPRODISPLAYHEAVYITALIC", pathExtension: "OTF")
    /// Resource file `SFPRODISPLAYLIGHTITALIC.OTF`.
    static let sfprodisplaylightitalicotF = Rswift.FileResource(bundle: R.hostingBundle, name: "SFPRODISPLAYLIGHTITALIC", pathExtension: "OTF")
    /// Resource file `SFPRODISPLAYMEDIUM.OTF`.
    static let sfprodisplaymediumotF = Rswift.FileResource(bundle: R.hostingBundle, name: "SFPRODISPLAYMEDIUM", pathExtension: "OTF")
    /// Resource file `SFPRODISPLAYREGULAR.OTF`.
    static let sfprodisplayregularotF = Rswift.FileResource(bundle: R.hostingBundle, name: "SFPRODISPLAYREGULAR", pathExtension: "OTF")
    /// Resource file `SFPRODISPLAYSEMIBOLDITALIC.OTF`.
    static let sfprodisplaysemibolditalicotF = Rswift.FileResource(bundle: R.hostingBundle, name: "SFPRODISPLAYSEMIBOLDITALIC", pathExtension: "OTF")
    /// Resource file `SFPRODISPLAYTHINITALIC.OTF`.
    static let sfprodisplaythinitalicotF = Rswift.FileResource(bundle: R.hostingBundle, name: "SFPRODISPLAYTHINITALIC", pathExtension: "OTF")
    /// Resource file `SFPRODISPLAYULTRALIGHTITALIC.OTF`.
    static let sfprodisplayultralightitalicotF = Rswift.FileResource(bundle: R.hostingBundle, name: "SFPRODISPLAYULTRALIGHTITALIC", pathExtension: "OTF")
    /// Resource file `V1.pdf`.
    static let v1Pdf = Rswift.FileResource(bundle: R.hostingBundle, name: "V1", pathExtension: "pdf")
    /// Resource file `back.pdf`.
    static let backPdf = Rswift.FileResource(bundle: R.hostingBundle, name: "back", pathExtension: "pdf")
    /// Resource file `facebook.png`.
    static let facebookPng = Rswift.FileResource(bundle: R.hostingBundle, name: "facebook", pathExtension: "png")
    /// Resource file `google.png`.
    static let googlePng = Rswift.FileResource(bundle: R.hostingBundle, name: "google", pathExtension: "png")
    /// Resource file `show.png`.
    static let showPng = Rswift.FileResource(bundle: R.hostingBundle, name: "show", pathExtension: "png")
    /// Resource file `smartphone.png`.
    static let smartphonePng = Rswift.FileResource(bundle: R.hostingBundle, name: "smartphone", pathExtension: "png")

    /// `bundle.url(forResource: "SFPRODISPLAYBLACKITALIC", withExtension: "OTF")`
    static func sfprodisplayblackitalicotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplayblackitalicotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFPRODISPLAYBOLD", withExtension: "OTF")`
    static func sfprodisplayboldotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplayboldotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFPRODISPLAYHEAVYITALIC", withExtension: "OTF")`
    static func sfprodisplayheavyitalicotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplayheavyitalicotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFPRODISPLAYLIGHTITALIC", withExtension: "OTF")`
    static func sfprodisplaylightitalicotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplaylightitalicotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFPRODISPLAYMEDIUM", withExtension: "OTF")`
    static func sfprodisplaymediumotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplaymediumotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFPRODISPLAYREGULAR", withExtension: "OTF")`
    static func sfprodisplayregularotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplayregularotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFPRODISPLAYSEMIBOLDITALIC", withExtension: "OTF")`
    static func sfprodisplaysemibolditalicotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplaysemibolditalicotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFPRODISPLAYTHINITALIC", withExtension: "OTF")`
    static func sfprodisplaythinitalicotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplaythinitalicotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFPRODISPLAYULTRALIGHTITALIC", withExtension: "OTF")`
    static func sfprodisplayultralightitalicotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplayultralightitalicotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "V1", withExtension: "pdf")`
    static func v1Pdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.v1Pdf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "back", withExtension: "pdf")`
    static func backPdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.backPdf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "facebook", withExtension: "png")`
    static func facebookPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.facebookPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "google", withExtension: "png")`
    static func googlePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googlePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "show", withExtension: "png")`
    static func showPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.showPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "smartphone", withExtension: "png")`
    static func smartphonePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.smartphonePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 9 fonts.
  struct font: Rswift.Validatable {
    /// Font `SFProDisplay-BlackItalic`.
    static let sfProDisplayBlackItalic = Rswift.FontResource(fontName: "SFProDisplay-BlackItalic")
    /// Font `SFProDisplay-Bold`.
    static let sfProDisplayBold = Rswift.FontResource(fontName: "SFProDisplay-Bold")
    /// Font `SFProDisplay-HeavyItalic`.
    static let sfProDisplayHeavyItalic = Rswift.FontResource(fontName: "SFProDisplay-HeavyItalic")
    /// Font `SFProDisplay-LightItalic`.
    static let sfProDisplayLightItalic = Rswift.FontResource(fontName: "SFProDisplay-LightItalic")
    /// Font `SFProDisplay-Medium`.
    static let sfProDisplayMedium = Rswift.FontResource(fontName: "SFProDisplay-Medium")
    /// Font `SFProDisplay-Regular`.
    static let sfProDisplayRegular = Rswift.FontResource(fontName: "SFProDisplay-Regular")
    /// Font `SFProDisplay-SemiboldItalic`.
    static let sfProDisplaySemiboldItalic = Rswift.FontResource(fontName: "SFProDisplay-SemiboldItalic")
    /// Font `SFProDisplay-ThinItalic`.
    static let sfProDisplayThinItalic = Rswift.FontResource(fontName: "SFProDisplay-ThinItalic")
    /// Font `SFProDisplay-UltralightItalic`.
    static let sfProDisplayUltralightItalic = Rswift.FontResource(fontName: "SFProDisplay-UltralightItalic")

    /// `UIFont(name: "SFProDisplay-BlackItalic", size: ...)`
    static func sfProDisplayBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBlackItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Bold", size: ...)`
    static func sfProDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBold, size: size)
    }

    /// `UIFont(name: "SFProDisplay-HeavyItalic", size: ...)`
    static func sfProDisplayHeavyItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayHeavyItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-LightItalic", size: ...)`
    static func sfProDisplayLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayLightItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Medium", size: ...)`
    static func sfProDisplayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayMedium, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Regular", size: ...)`
    static func sfProDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayRegular, size: size)
    }

    /// `UIFont(name: "SFProDisplay-SemiboldItalic", size: ...)`
    static func sfProDisplaySemiboldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplaySemiboldItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-ThinItalic", size: ...)`
    static func sfProDisplayThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayThinItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-UltralightItalic", size: ...)`
    static func sfProDisplayUltralightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayUltralightItalic, size: size)
    }

    static func validate() throws {
      if R.font.sfProDisplayBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-BlackItalic' could not be loaded, is 'SFPRODISPLAYBLACKITALIC.OTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Bold' could not be loaded, is 'SFPRODISPLAYBOLD.OTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayHeavyItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-HeavyItalic' could not be loaded, is 'SFPRODISPLAYHEAVYITALIC.OTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-LightItalic' could not be loaded, is 'SFPRODISPLAYLIGHTITALIC.OTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Medium' could not be loaded, is 'SFPRODISPLAYMEDIUM.OTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Regular' could not be loaded, is 'SFPRODISPLAYREGULAR.OTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplaySemiboldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-SemiboldItalic' could not be loaded, is 'SFPRODISPLAYSEMIBOLDITALIC.OTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-ThinItalic' could not be loaded, is 'SFPRODISPLAYTHINITALIC.OTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayUltralightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-UltralightItalic' could not be loaded, is 'SFPRODISPLAYULTRALIGHTITALIC.OTF' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 12 images.
  struct image {
    /// Image `Illustrations1`.
    static let illustrations1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Illustrations1")
    /// Image `Illustrations2`.
    static let illustrations2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Illustrations2")
    /// Image `Illustrations`.
    static let illustrations = Rswift.ImageResource(bundle: R.hostingBundle, name: "Illustrations")
    /// Image `Path-1`.
    static let path1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Path-1")
    /// Image `Path`.
    static let path = Rswift.ImageResource(bundle: R.hostingBundle, name: "Path")
    /// Image `V1`.
    static let v1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "V1")
    /// Image `V2`.
    static let v2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "V2")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `facebook (1)`.
    static let facebook1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook (1)")
    /// Image `hide`.
    static let hide = Rswift.ImageResource(bundle: R.hostingBundle, name: "hide")
    /// Image `pause-button`.
    static let pauseButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "pause-button")
    /// Image `smartphone`.
    static let smartphone = Rswift.ImageResource(bundle: R.hostingBundle, name: "smartphone")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Illustrations", bundle: ..., traitCollection: ...)`
    static func illustrations(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.illustrations, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Illustrations1", bundle: ..., traitCollection: ...)`
    static func illustrations1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.illustrations1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Illustrations2", bundle: ..., traitCollection: ...)`
    static func illustrations2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.illustrations2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Path", bundle: ..., traitCollection: ...)`
    static func path(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.path, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Path-1", bundle: ..., traitCollection: ...)`
    static func path1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.path1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "V1", bundle: ..., traitCollection: ...)`
    static func v1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "V2", bundle: ..., traitCollection: ...)`
    static func v2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook (1)", bundle: ..., traitCollection: ...)`
    static func facebook1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hide", bundle: ..., traitCollection: ...)`
    static func hide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hide, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pause-button", bundle: ..., traitCollection: ...)`
    static func pauseButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pauseButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "smartphone", bundle: ..., traitCollection: ...)`
    static func smartphone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smartphone, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false
      static let uiApplicationSupportsTabbedSceneCollection = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Onboarding"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<OnBoardingCollectionCell> = Rswift.ReuseIdentifier(identifier: "cell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try onboarding.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try signup.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Main"

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "V1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'V1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'google' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "smartphone.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'smartphone.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FB", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FB' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Google' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Grey' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "System-theme", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'System-theme' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct onboarding: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Onboarding"
      let swipeCollectionViewController = StoryboardViewControllerResource<OnBoardingSwipeCollectionViewController>(identifier: "SwipeCollectionViewController")

      func swipeCollectionViewController(_: Void = ()) -> OnBoardingSwipeCollectionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: swipeCollectionViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Illustrations", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Illustrations' is used in storyboard 'Onboarding', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Grey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Grey' is used in storyboard 'Onboarding', but couldn't be loaded.") }
        }
        if _R.storyboard.onboarding().swipeCollectionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'swipeCollectionViewController' could not be loaded from storyboard 'Onboarding' as 'OnBoardingSwipeCollectionViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct signup: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Signup"
      let signUpViewController = StoryboardViewControllerResource<SignUpViewController>(identifier: "SignUpViewController")

      func signUpViewController(_: Void = ()) -> SignUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'google' is used in storyboard 'Signup', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hide", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hide' is used in storyboard 'Signup', but couldn't be loaded.") }
        if UIKit.UIImage(named: "smartphone.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'smartphone.png' is used in storyboard 'Signup', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "FB", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'FB' is used in storyboard 'Signup', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Google' is used in storyboard 'Signup', but couldn't be loaded.") }
          if UIKit.UIColor(named: "System-theme", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'System-theme' is used in storyboard 'Signup', but couldn't be loaded.") }
        }
        if _R.storyboard.signup().signUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpViewController' could not be loaded from storyboard 'Signup' as 'SignUpViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
